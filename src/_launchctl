#compdef launchctl

__launchctl_list_sigs () {
    for sig in HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH INFO USR1 USR2; do
        echo $sig
        echo SIG$sig
    done
    seq 1 31
}

__launchctl_list_pids () {
    command ps -axo pid=,comm= | awk '{printf "%s\t%s\n", $1, $2}'
}

__launchctl_list_uids ()
{
    dscl . -list /Users UniqueID 2>/dev/null | awk '{print $2}'
}

join_list ()
{
    tr -d ' ' | tr '\n' ',' | sed -e 's/.$//'
}

__launchctl_list_domains () {
  local -a domains=(system user gui login session pid)
  for d in $domains; do
    echo "$d/"
  done
}

__launchctl_list_subdomains () {
  local -a subdomains
  subdomains+=(system/)
  # user and gui subdomains for each UID
  for uid in ${${(@f)$(__launchctl_list_uids)}}; do
    subdomains+=("user/$uid/")
    subdomains+=("gui/$uid/")
  done
  # pid subdomains for each PID
  for pid in ${${(@f)$(__launchctl_list_pids)}}; do
    subdomains+=("pid/$pid/")
  done
  # Optionally add login/session/asid logic here if needed
  print -l -- $subdomains
}

__launchctl_list_service_targets ()
{
    eval $(echo echo {`__launchctl_list_subdomains | tr ' ' ',' `}{`__launchctl_list_labels | join_list| tr ' ' ',' `})
}

__launchctl_list_labels ()
{
    launchctl list | awk 'NR>1 && $3 !~ /0x[0-9a-fA-F]+\.(anonymous|mach_init)/ {print $3}'
}

__launchctl_list_started ()
{
    launchctl list | awk 'NR>1 && $3 !~ /0x[0-9a-fA-F]+\.(anonymous|mach_init)/ && $1 !~ /-/ {print $3}'
}

__launchctl_list_stopped ()
{
    launchctl list | awk 'NR>1 && $3 !~ /0x[0-9a-fA-F]+\.(anonymous|mach_init)/ && $1 ~ /-/ {print $3}'
}
_launchctl ()
{
    local context state line
    typeset -A opt_args
    
    local cur="$words[CURRENT]"
    local prev="$words[CURRENT-1]"
    local two_prev="$words[CURRENT-2]"

    # Subcommand list
    local -a subcommands=(bootstrap bootout enable disable uncache kickstart attach debug kill blame print print-cache print-disabled plist procinfo hostinfo resolveport limit runstats examine config dumpstate reboot bootshell load unload remove list start stop setenv unsetenv getenv export getrusage shutdown umask bslist bstree bsexec asuser submit managerpid manageruid managername error variant version help)
    [[ $CURRENT -eq 2 ]] && {
        # compadd "${(@)=${subcommands}}"
        compadd "${subcommands[@]}"
        return
    }
    if [[ $CURRENT -eq 3 ]]; then
        case "$prev" in
            print|enable|disable|blame|runstats|bootstrap|bootout|print-disabled)
                if [[ ${cur} == */*/* ]]; then
                    compadd -S "" "${(@f)$(__launchctl_list_service_targets)}"
                elif [[ ${cur} == */* ]]; then
                    compadd -S "" "${(@f)$(__launchctl_list_subdomains)}"
                else
                    compadd -S "" "${(@f)$(__launchctl_list_domains)}"
                fi
                return
                ;;
            debug)
                if [[ ${cur} == */*/* ]]; then
                    compadd -S "" "${(@f)$(__launchctl_list_service_targets)}"
                elif [[ ${cur} == */* ]]; then
                    compadd -S "" "${(@f)$(__launchctl_list_subdomains)}"
                else
                    compadd -S "" "${(@f)$(__launchctl_list_domains)}"
                fi
                return
                ;;
            submit)
                compadd "-l" "-p" "-o" "-e"
                return
                ;;
            help)
                compadd "${(@)=${subcommands}}"
                return
                ;;
            kickstart)
                compadd "-k" "-p" "-s"
                return
                ;;
            reboot)
                compadd "-s" "system" "halt" "userspace" "reroot" "logout" "apps"
                return
                ;;
            attach)
                compadd "-k" "-s" "-x"
                return
                ;;
            bootshell)
                compadd "continue"
                return
                ;;
            procinfo|resolveport)
                local -a pids pid_desc
                local IFS=$'\n'
                for line in ${(@f)$(__launchctl_list_pids)}; do
                    pid_desc+=("$line")
                    pids+=("${line%%$'\t'*}")
                done
                compadd -d pid_desc -- $pids
                return
                ;;
            error)
                compadd "posix" "mach" "bootstrap"
                return
                ;;
            remove|list|uncache)
                compadd "${(@f)$(__launchctl_list_labels)}"
                return
                ;;
            start)
                compadd "${(@f)$(__launchctl_list_stopped)}"
                return
                ;;
            stop)
                compadd "${(@f)$(__launchctl_list_started)}"
                return
                ;;
            kill)
                compadd "${(@f)$(__launchctl_list_sigs)}"
                return
                ;;
            bsexec)
                local -a pids pid_desc
                local IFS=$'\n'
                for line in ${(@f)$(__launchctl_list_pids)}; do
                    pid_desc+=("$line")
                    pids+=("${line%%$'\t'*}")
                done
                compadd -d pid_desc -- $pids
                return
                ;;
            asuser)
                compadd "${(@f)$(__launchctl_list_uids)}"
                return
                ;;
            config)
                compadd "system" "user"
                return
                ;;
            load|unload)
                compadd "-w" "-F" "-S" "-D"
                _files
                return
                ;;
            limit)
                compadd "cpu" "filesize" "data" "stack" "core" "rss" "memlock" "maxproc" "maxfiles"
                return
                ;;
            getrusage)
                compadd "self" "children"
                return
                ;;
            export|shutdown|umask|bslist|bstree|getenv|setenv|unsetenv|variant|version|managerpid|manageruid|managername)
                # These commands take no arguments or have simple string arguments
                return
                ;;
        esac
    fi
    if [[ $CURRENT -eq 4 ]]; then
        case "$two_prev" in
            config)
                compadd "umask" "path"
                return
                ;;
            reboot)
                compadd "system" "halt" "userspace" "reroot" "logout" "apps"
                return
                ;;
            kill|attach|kickstart)
                if [[ ${cur} == */*/* ]]; then
                    compadd -S "" "${(@f)$(__launchctl_list_service_targets)}"
                elif [[ ${cur} == */* ]]; then
                    compadd -S "" "${(@f)$(__launchctl_list_subdomains)}"
                else
                    compadd -S "" "${(@f)$(__launchctl_list_domains)}"
                fi
                return
                ;;
            bootstrap|bootout)
                _files
                return
                ;;
            submit)
                case "$prev" in
                    -l|-p|-o|-e)
                        return
                        ;;
                esac
                ;;
        esac
    fi
    
    # Handle debug command with all its options
    if [[ $words[2] == "debug" && $CURRENT -gt 3 ]]; then
        compadd "--program" "--guard-malloc" "--malloc-stack-logging" "--malloc-nano-allocator" \
                "--debug-libraries" "--introspection-libraries" "--NSZombie" "--32" \
                "--stdin" "--stdout" "--stderr" "--environment" "--"
        return
    fi
}

if [ "$funcstack[1]" = "_launchctl" ]; then
    _launchctl "$@"
else
    compdef _launchctl launchctl
fi
